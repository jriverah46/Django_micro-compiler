Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     instructions -> instruction instructions
Rule 3     instructions -> instruction
Rule 4     instruction -> WRITE LPAREN write_args RPAREN END
Rule 5     write_args -> expression
Rule 6     write_args -> STRING
Rule 7     write_args -> STRING COMMA expression
Rule 8     write_args -> expression COMMA expression
Rule 9     instruction -> CAPTURE LPAREN ID RPAREN END
Rule 10    instruction -> IF LPAREN condition RPAREN THEN instructions ENDIF
Rule 11    instruction -> ID ASSIGN expression END
Rule 12    condition -> expression relop expression
Rule 13    condition -> condition AND condition
Rule 14    condition -> condition OR condition
Rule 15    condition -> NOT condition
Rule 16    relop -> LT
Rule 17    relop -> LE
Rule 18    relop -> GT
Rule 19    relop -> GE
Rule 20    relop -> EQ
Rule 21    relop -> NE
Rule 22    expression -> expression PLUS term
Rule 23    expression -> expression MINUS term
Rule 24    expression -> term
Rule 25    term -> term TIMES factor
Rule 26    term -> term DIVIDE factor
Rule 27    term -> factor
Rule 28    factor -> NUMBER
Rule 29    factor -> ID
Rule 30    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 13
ASSIGN               : 11
CAPTURE              : 9
COMMA                : 7 8
DIVIDE               : 26
END                  : 4 9 11
ENDIF                : 10
EQ                   : 20
GE                   : 19
GT                   : 18
ID                   : 9 11 29
IF                   : 10
LE                   : 17
LPAREN               : 4 9 10 30
LT                   : 16
MINUS                : 23
NE                   : 21
NOT                  : 15
NUMBER               : 28
OR                   : 14
PLUS                 : 22
RPAREN               : 4 9 10 30
STRING               : 6 7
THEN                 : 10
TIMES                : 25
WRITE                : 4
error                : 

Nonterminals, with rules where they appear

condition            : 10 13 13 14 14 15
expression           : 5 7 8 8 11 12 12 22 23 30
factor               : 25 26 27
instruction          : 2 3
instructions         : 1 2 10
program              : 0
relop                : 12
term                 : 22 23 24 25 26
write_args           : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) instructions -> . instruction instructions
    (3) instructions -> . instruction
    (4) instruction -> . WRITE LPAREN write_args RPAREN END
    (9) instruction -> . CAPTURE LPAREN ID RPAREN END
    (10) instruction -> . IF LPAREN condition RPAREN THEN instructions ENDIF
    (11) instruction -> . ID ASSIGN expression END

    WRITE           shift and go to state 4
    CAPTURE         shift and go to state 5
    IF              shift and go to state 7
    ID              shift and go to state 6

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .

    $end            reduce using rule 1 (program -> instructions .)


state 3

    (2) instructions -> instruction . instructions
    (3) instructions -> instruction .
    (2) instructions -> . instruction instructions
    (3) instructions -> . instruction
    (4) instruction -> . WRITE LPAREN write_args RPAREN END
    (9) instruction -> . CAPTURE LPAREN ID RPAREN END
    (10) instruction -> . IF LPAREN condition RPAREN THEN instructions ENDIF
    (11) instruction -> . ID ASSIGN expression END

    $end            reduce using rule 3 (instructions -> instruction .)
    ENDIF           reduce using rule 3 (instructions -> instruction .)
    WRITE           shift and go to state 4
    CAPTURE         shift and go to state 5
    IF              shift and go to state 7
    ID              shift and go to state 6

    instruction                    shift and go to state 3
    instructions                   shift and go to state 8

state 4

    (4) instruction -> WRITE . LPAREN write_args RPAREN END

    LPAREN          shift and go to state 9


state 5

    (9) instruction -> CAPTURE . LPAREN ID RPAREN END

    LPAREN          shift and go to state 10


state 6

    (11) instruction -> ID . ASSIGN expression END

    ASSIGN          shift and go to state 11


state 7

    (10) instruction -> IF . LPAREN condition RPAREN THEN instructions ENDIF

    LPAREN          shift and go to state 12


state 8

    (2) instructions -> instruction instructions .

    $end            reduce using rule 2 (instructions -> instruction instructions .)
    ENDIF           reduce using rule 2 (instructions -> instruction instructions .)


state 9

    (4) instruction -> WRITE LPAREN . write_args RPAREN END
    (5) write_args -> . expression
    (6) write_args -> . STRING
    (7) write_args -> . STRING COMMA expression
    (8) write_args -> . expression COMMA expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 16
    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    write_args                     shift and go to state 14
    expression                     shift and go to state 15
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 10

    (9) instruction -> CAPTURE LPAREN . ID RPAREN END

    ID              shift and go to state 21


state 11

    (11) instruction -> ID ASSIGN . expression END
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    expression                     shift and go to state 22
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 12

    (10) instruction -> IF LPAREN . condition RPAREN THEN instructions ENDIF
    (12) condition -> . expression relop expression
    (13) condition -> . condition AND condition
    (14) condition -> . condition OR condition
    (15) condition -> . NOT condition
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 25
    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    condition                      shift and go to state 23
    expression                     shift and go to state 24
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 13

    (30) factor -> LPAREN . expression RPAREN
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    expression                     shift and go to state 26
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 14

    (4) instruction -> WRITE LPAREN write_args . RPAREN END

    RPAREN          shift and go to state 27


state 15

    (5) write_args -> expression .
    (8) write_args -> expression . COMMA expression
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 5 (write_args -> expression .)
    COMMA           shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30


state 16

    (6) write_args -> STRING .
    (7) write_args -> STRING . COMMA expression

    RPAREN          reduce using rule 6 (write_args -> STRING .)
    COMMA           shift and go to state 31


state 17

    (24) expression -> term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    COMMA           reduce using rule 24 (expression -> term .)
    PLUS            reduce using rule 24 (expression -> term .)
    MINUS           reduce using rule 24 (expression -> term .)
    RPAREN          reduce using rule 24 (expression -> term .)
    END             reduce using rule 24 (expression -> term .)
    LT              reduce using rule 24 (expression -> term .)
    LE              reduce using rule 24 (expression -> term .)
    GT              reduce using rule 24 (expression -> term .)
    GE              reduce using rule 24 (expression -> term .)
    EQ              reduce using rule 24 (expression -> term .)
    NE              reduce using rule 24 (expression -> term .)
    AND             reduce using rule 24 (expression -> term .)
    OR              reduce using rule 24 (expression -> term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 18

    (27) term -> factor .

    TIMES           reduce using rule 27 (term -> factor .)
    DIVIDE          reduce using rule 27 (term -> factor .)
    COMMA           reduce using rule 27 (term -> factor .)
    PLUS            reduce using rule 27 (term -> factor .)
    MINUS           reduce using rule 27 (term -> factor .)
    RPAREN          reduce using rule 27 (term -> factor .)
    END             reduce using rule 27 (term -> factor .)
    LT              reduce using rule 27 (term -> factor .)
    LE              reduce using rule 27 (term -> factor .)
    GT              reduce using rule 27 (term -> factor .)
    GE              reduce using rule 27 (term -> factor .)
    EQ              reduce using rule 27 (term -> factor .)
    NE              reduce using rule 27 (term -> factor .)
    AND             reduce using rule 27 (term -> factor .)
    OR              reduce using rule 27 (term -> factor .)


state 19

    (28) factor -> NUMBER .

    TIMES           reduce using rule 28 (factor -> NUMBER .)
    DIVIDE          reduce using rule 28 (factor -> NUMBER .)
    COMMA           reduce using rule 28 (factor -> NUMBER .)
    PLUS            reduce using rule 28 (factor -> NUMBER .)
    MINUS           reduce using rule 28 (factor -> NUMBER .)
    RPAREN          reduce using rule 28 (factor -> NUMBER .)
    END             reduce using rule 28 (factor -> NUMBER .)
    LT              reduce using rule 28 (factor -> NUMBER .)
    LE              reduce using rule 28 (factor -> NUMBER .)
    GT              reduce using rule 28 (factor -> NUMBER .)
    GE              reduce using rule 28 (factor -> NUMBER .)
    EQ              reduce using rule 28 (factor -> NUMBER .)
    NE              reduce using rule 28 (factor -> NUMBER .)
    AND             reduce using rule 28 (factor -> NUMBER .)
    OR              reduce using rule 28 (factor -> NUMBER .)


state 20

    (29) factor -> ID .

    TIMES           reduce using rule 29 (factor -> ID .)
    DIVIDE          reduce using rule 29 (factor -> ID .)
    COMMA           reduce using rule 29 (factor -> ID .)
    PLUS            reduce using rule 29 (factor -> ID .)
    MINUS           reduce using rule 29 (factor -> ID .)
    RPAREN          reduce using rule 29 (factor -> ID .)
    END             reduce using rule 29 (factor -> ID .)
    LT              reduce using rule 29 (factor -> ID .)
    LE              reduce using rule 29 (factor -> ID .)
    GT              reduce using rule 29 (factor -> ID .)
    GE              reduce using rule 29 (factor -> ID .)
    EQ              reduce using rule 29 (factor -> ID .)
    NE              reduce using rule 29 (factor -> ID .)
    AND             reduce using rule 29 (factor -> ID .)
    OR              reduce using rule 29 (factor -> ID .)


state 21

    (9) instruction -> CAPTURE LPAREN ID . RPAREN END

    RPAREN          shift and go to state 34


state 22

    (11) instruction -> ID ASSIGN expression . END
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    END             shift and go to state 35
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30


state 23

    (10) instruction -> IF LPAREN condition . RPAREN THEN instructions ENDIF
    (13) condition -> condition . AND condition
    (14) condition -> condition . OR condition

    RPAREN          shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38


state 24

    (12) condition -> expression . relop expression
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (16) relop -> . LT
    (17) relop -> . LE
    (18) relop -> . GT
    (19) relop -> . GE
    (20) relop -> . EQ
    (21) relop -> . NE

    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    LT              shift and go to state 40
    LE              shift and go to state 41
    GT              shift and go to state 42
    GE              shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45

    relop                          shift and go to state 39

state 25

    (15) condition -> NOT . condition
    (12) condition -> . expression relop expression
    (13) condition -> . condition AND condition
    (14) condition -> . condition OR condition
    (15) condition -> . NOT condition
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 25
    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    condition                      shift and go to state 46
    expression                     shift and go to state 24
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 26

    (30) factor -> LPAREN expression . RPAREN
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          shift and go to state 47
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30


state 27

    (4) instruction -> WRITE LPAREN write_args RPAREN . END

    END             shift and go to state 48


state 28

    (8) write_args -> expression COMMA . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    expression                     shift and go to state 49
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 29

    (22) expression -> expression PLUS . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    term                           shift and go to state 50
    factor                         shift and go to state 18

state 30

    (23) expression -> expression MINUS . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    term                           shift and go to state 51
    factor                         shift and go to state 18

state 31

    (7) write_args -> STRING COMMA . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    expression                     shift and go to state 52
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 32

    (25) term -> term TIMES . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    factor                         shift and go to state 53

state 33

    (26) term -> term DIVIDE . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    factor                         shift and go to state 54

state 34

    (9) instruction -> CAPTURE LPAREN ID RPAREN . END

    END             shift and go to state 55


state 35

    (11) instruction -> ID ASSIGN expression END .

    WRITE           reduce using rule 11 (instruction -> ID ASSIGN expression END .)
    CAPTURE         reduce using rule 11 (instruction -> ID ASSIGN expression END .)
    IF              reduce using rule 11 (instruction -> ID ASSIGN expression END .)
    ID              reduce using rule 11 (instruction -> ID ASSIGN expression END .)
    $end            reduce using rule 11 (instruction -> ID ASSIGN expression END .)
    ENDIF           reduce using rule 11 (instruction -> ID ASSIGN expression END .)


state 36

    (10) instruction -> IF LPAREN condition RPAREN . THEN instructions ENDIF

    THEN            shift and go to state 56


state 37

    (13) condition -> condition AND . condition
    (12) condition -> . expression relop expression
    (13) condition -> . condition AND condition
    (14) condition -> . condition OR condition
    (15) condition -> . NOT condition
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 25
    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    condition                      shift and go to state 57
    expression                     shift and go to state 24
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 38

    (14) condition -> condition OR . condition
    (12) condition -> . expression relop expression
    (13) condition -> . condition AND condition
    (14) condition -> . condition OR condition
    (15) condition -> . NOT condition
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 25
    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    condition                      shift and go to state 58
    expression                     shift and go to state 24
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 39

    (12) condition -> expression relop . expression
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . term
    (25) term -> . term TIMES factor
    (26) term -> . term DIVIDE factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . ID
    (30) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 19
    ID              shift and go to state 20
    LPAREN          shift and go to state 13

    expression                     shift and go to state 59
    term                           shift and go to state 17
    factor                         shift and go to state 18

state 40

    (16) relop -> LT .

    NUMBER          reduce using rule 16 (relop -> LT .)
    ID              reduce using rule 16 (relop -> LT .)
    LPAREN          reduce using rule 16 (relop -> LT .)


state 41

    (17) relop -> LE .

    NUMBER          reduce using rule 17 (relop -> LE .)
    ID              reduce using rule 17 (relop -> LE .)
    LPAREN          reduce using rule 17 (relop -> LE .)


state 42

    (18) relop -> GT .

    NUMBER          reduce using rule 18 (relop -> GT .)
    ID              reduce using rule 18 (relop -> GT .)
    LPAREN          reduce using rule 18 (relop -> GT .)


state 43

    (19) relop -> GE .

    NUMBER          reduce using rule 19 (relop -> GE .)
    ID              reduce using rule 19 (relop -> GE .)
    LPAREN          reduce using rule 19 (relop -> GE .)


state 44

    (20) relop -> EQ .

    NUMBER          reduce using rule 20 (relop -> EQ .)
    ID              reduce using rule 20 (relop -> EQ .)
    LPAREN          reduce using rule 20 (relop -> EQ .)


state 45

    (21) relop -> NE .

    NUMBER          reduce using rule 21 (relop -> NE .)
    ID              reduce using rule 21 (relop -> NE .)
    LPAREN          reduce using rule 21 (relop -> NE .)


state 46

    (15) condition -> NOT condition .
    (13) condition -> condition . AND condition
    (14) condition -> condition . OR condition

    RPAREN          reduce using rule 15 (condition -> NOT condition .)
    AND             reduce using rule 15 (condition -> NOT condition .)
    OR              reduce using rule 15 (condition -> NOT condition .)

  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 47

    (30) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 30 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 30 (factor -> LPAREN expression RPAREN .)


state 48

    (4) instruction -> WRITE LPAREN write_args RPAREN END .

    WRITE           reduce using rule 4 (instruction -> WRITE LPAREN write_args RPAREN END .)
    CAPTURE         reduce using rule 4 (instruction -> WRITE LPAREN write_args RPAREN END .)
    IF              reduce using rule 4 (instruction -> WRITE LPAREN write_args RPAREN END .)
    ID              reduce using rule 4 (instruction -> WRITE LPAREN write_args RPAREN END .)
    $end            reduce using rule 4 (instruction -> WRITE LPAREN write_args RPAREN END .)
    ENDIF           reduce using rule 4 (instruction -> WRITE LPAREN write_args RPAREN END .)


state 49

    (8) write_args -> expression COMMA expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 8 (write_args -> expression COMMA expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30


state 50

    (22) expression -> expression PLUS term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    COMMA           reduce using rule 22 (expression -> expression PLUS term .)
    PLUS            reduce using rule 22 (expression -> expression PLUS term .)
    MINUS           reduce using rule 22 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 22 (expression -> expression PLUS term .)
    END             reduce using rule 22 (expression -> expression PLUS term .)
    LT              reduce using rule 22 (expression -> expression PLUS term .)
    LE              reduce using rule 22 (expression -> expression PLUS term .)
    GT              reduce using rule 22 (expression -> expression PLUS term .)
    GE              reduce using rule 22 (expression -> expression PLUS term .)
    EQ              reduce using rule 22 (expression -> expression PLUS term .)
    NE              reduce using rule 22 (expression -> expression PLUS term .)
    AND             reduce using rule 22 (expression -> expression PLUS term .)
    OR              reduce using rule 22 (expression -> expression PLUS term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 51

    (23) expression -> expression MINUS term .
    (25) term -> term . TIMES factor
    (26) term -> term . DIVIDE factor

    COMMA           reduce using rule 23 (expression -> expression MINUS term .)
    PLUS            reduce using rule 23 (expression -> expression MINUS term .)
    MINUS           reduce using rule 23 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 23 (expression -> expression MINUS term .)
    END             reduce using rule 23 (expression -> expression MINUS term .)
    LT              reduce using rule 23 (expression -> expression MINUS term .)
    LE              reduce using rule 23 (expression -> expression MINUS term .)
    GT              reduce using rule 23 (expression -> expression MINUS term .)
    GE              reduce using rule 23 (expression -> expression MINUS term .)
    EQ              reduce using rule 23 (expression -> expression MINUS term .)
    NE              reduce using rule 23 (expression -> expression MINUS term .)
    AND             reduce using rule 23 (expression -> expression MINUS term .)
    OR              reduce using rule 23 (expression -> expression MINUS term .)
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33


state 52

    (7) write_args -> STRING COMMA expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 7 (write_args -> STRING COMMA expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30


state 53

    (25) term -> term TIMES factor .

    TIMES           reduce using rule 25 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 25 (term -> term TIMES factor .)
    COMMA           reduce using rule 25 (term -> term TIMES factor .)
    PLUS            reduce using rule 25 (term -> term TIMES factor .)
    MINUS           reduce using rule 25 (term -> term TIMES factor .)
    RPAREN          reduce using rule 25 (term -> term TIMES factor .)
    END             reduce using rule 25 (term -> term TIMES factor .)
    LT              reduce using rule 25 (term -> term TIMES factor .)
    LE              reduce using rule 25 (term -> term TIMES factor .)
    GT              reduce using rule 25 (term -> term TIMES factor .)
    GE              reduce using rule 25 (term -> term TIMES factor .)
    EQ              reduce using rule 25 (term -> term TIMES factor .)
    NE              reduce using rule 25 (term -> term TIMES factor .)
    AND             reduce using rule 25 (term -> term TIMES factor .)
    OR              reduce using rule 25 (term -> term TIMES factor .)


state 54

    (26) term -> term DIVIDE factor .

    TIMES           reduce using rule 26 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 26 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 26 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 26 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 26 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 26 (term -> term DIVIDE factor .)
    END             reduce using rule 26 (term -> term DIVIDE factor .)
    LT              reduce using rule 26 (term -> term DIVIDE factor .)
    LE              reduce using rule 26 (term -> term DIVIDE factor .)
    GT              reduce using rule 26 (term -> term DIVIDE factor .)
    GE              reduce using rule 26 (term -> term DIVIDE factor .)
    EQ              reduce using rule 26 (term -> term DIVIDE factor .)
    NE              reduce using rule 26 (term -> term DIVIDE factor .)
    AND             reduce using rule 26 (term -> term DIVIDE factor .)
    OR              reduce using rule 26 (term -> term DIVIDE factor .)


state 55

    (9) instruction -> CAPTURE LPAREN ID RPAREN END .

    WRITE           reduce using rule 9 (instruction -> CAPTURE LPAREN ID RPAREN END .)
    CAPTURE         reduce using rule 9 (instruction -> CAPTURE LPAREN ID RPAREN END .)
    IF              reduce using rule 9 (instruction -> CAPTURE LPAREN ID RPAREN END .)
    ID              reduce using rule 9 (instruction -> CAPTURE LPAREN ID RPAREN END .)
    $end            reduce using rule 9 (instruction -> CAPTURE LPAREN ID RPAREN END .)
    ENDIF           reduce using rule 9 (instruction -> CAPTURE LPAREN ID RPAREN END .)


state 56

    (10) instruction -> IF LPAREN condition RPAREN THEN . instructions ENDIF
    (2) instructions -> . instruction instructions
    (3) instructions -> . instruction
    (4) instruction -> . WRITE LPAREN write_args RPAREN END
    (9) instruction -> . CAPTURE LPAREN ID RPAREN END
    (10) instruction -> . IF LPAREN condition RPAREN THEN instructions ENDIF
    (11) instruction -> . ID ASSIGN expression END

    WRITE           shift and go to state 4
    CAPTURE         shift and go to state 5
    IF              shift and go to state 7
    ID              shift and go to state 6

    instructions                   shift and go to state 60
    instruction                    shift and go to state 3

state 57

    (13) condition -> condition AND condition .
    (13) condition -> condition . AND condition
    (14) condition -> condition . OR condition

    RPAREN          reduce using rule 13 (condition -> condition AND condition .)
    AND             reduce using rule 13 (condition -> condition AND condition .)
    OR              reduce using rule 13 (condition -> condition AND condition .)

  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 38 ]


state 58

    (14) condition -> condition OR condition .
    (13) condition -> condition . AND condition
    (14) condition -> condition . OR condition

    RPAREN          reduce using rule 14 (condition -> condition OR condition .)
    OR              reduce using rule 14 (condition -> condition OR condition .)
    AND             shift and go to state 37

  ! AND             [ reduce using rule 14 (condition -> condition OR condition .) ]
  ! OR              [ shift and go to state 38 ]


state 59

    (12) condition -> expression relop expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term

    RPAREN          reduce using rule 12 (condition -> expression relop expression .)
    AND             reduce using rule 12 (condition -> expression relop expression .)
    OR              reduce using rule 12 (condition -> expression relop expression .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30


state 60

    (10) instruction -> IF LPAREN condition RPAREN THEN instructions . ENDIF

    ENDIF           shift and go to state 61


state 61

    (10) instruction -> IF LPAREN condition RPAREN THEN instructions ENDIF .

    WRITE           reduce using rule 10 (instruction -> IF LPAREN condition RPAREN THEN instructions ENDIF .)
    CAPTURE         reduce using rule 10 (instruction -> IF LPAREN condition RPAREN THEN instructions ENDIF .)
    IF              reduce using rule 10 (instruction -> IF LPAREN condition RPAREN THEN instructions ENDIF .)
    ID              reduce using rule 10 (instruction -> IF LPAREN condition RPAREN THEN instructions ENDIF .)
    $end            reduce using rule 10 (instruction -> IF LPAREN condition RPAREN THEN instructions ENDIF .)
    ENDIF           reduce using rule 10 (instruction -> IF LPAREN condition RPAREN THEN instructions ENDIF .)

